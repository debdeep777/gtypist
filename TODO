-------------------------------------------------------------------------
THINGS TO DO for GNU Typist

See our latest TODO file on 
http://savannah.gnu.org/cgi-bin/viewcvs/~checkout~/gtypist/TODO !

-------------------------------------------------------------------------

If you are interested in helping for some of the below items,
we will be glad to have you in the development team!

You can contact us by writing to bug-gtypist@gnu.org.
Your suggestions are welcome too!

SHORT TERM

 * Improve the French translation of "lesson file", which
   includes both Drills (translated by "Exercice") and
   Speed tests ("Tests de vitesse").

 * Standardize lesson file names, using standards for languages and
   keyboard types.

 * Make a separate package for lessons, so that lessons
   compatible with a given gtypist version can be released
   without having to release the tool again.
   This is already done by other packages: gimp plug-ins or
   TeTeX fonts are released separately. 

   This is definitely need for this tool, for which tutorial
   files are at least as valuable as the raw program itself.

 * Provide a variant of the `n.typ' calculator keypad lesson,
   in which the `.' character is replaced by `,'. Useful for some
   european keyboards.

 * Port the interface to GTK. 
   Should Gnome be supported too? This shouldn't be
   mandatory (configure option)... in particular for Win32
   support, for Unix computers on which Gnome has not been
   installed, as well as to keep CPU and RAM usage low.

   The benefits we can expect from a GTK interface are:

   - Much attractive than the `ncurses' interface. 
   - Not using `ncurses' should avoid problems supporting different
     terminal types.
   - We could have a graphical control panel, to change settings that
     are so far only available in the command line (keyboard type,
     silent mode...)
   - Easy access to help and manual
   - Could still be compiled on Win32 on which GTK has been ported.


MEDIUM TERM

 * Update Native Language Support according to the messages
   in the new interface. Support other languages 
   (better do that after the new interface is available)

 * Improve the documentation of course files

 * Broaden our lesson database:

   - Create new lessons for other languages and keyboard types. 
   - Translate lessons in other languages (for languages
     that share the same keyboard, you can reuse instructions
     and drills) 
   - We can also look for teachers who are ready to contribute
     lessons or let us reuse theirs...
   - Reuse lessons from old typing teaching books which
     copyrights have expired (how much time does it take?).

 * Better typing statistics.  Speed and accuracy for individual keys, 
   and individual fingers. This helps to indicate where extra practice
   may be useful to the user (see Jtypist which displays this as
   graphical bars, using color to indicate areas that need work).
   A measure of typing rhythm would also be useful.

LONG TERM

 * While typing, graphically show the finger that is supposed to be used.

 * Read lessons in the file formats of other free typing tutors
   (such as Jtypist).

 * Emulate other keyboard types.  For example, Jtypist can pretend that
   you have a French, German, or Dvorak keyboard on the system even
   if you don't.  It will translate keypresses between keyboard types
   before checking them for correctness, and registering timings.
   This work requires that the program should have keyboard layout
   maps available to it, and arises as a result of maintaining typing
   statistics by key and by finger (the program needs to know what
   key is operated by which finger).

 * Support audio typing exercises. Users would type from a text
   read by a speaker. Several audio files would be need, according to
   the language and the targeted typing speeded. That would be useful
   for people like secretaries and journalists.

